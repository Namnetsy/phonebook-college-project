<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYAAACVFRII7iciFf8pJBj/KSQY/ykkGP8pJBj/KSQY/ykk
        GP8pJBj/KSQY/ykkGP8pJBj/KSQY/ykkGP8pJBj/KSQY/ykkGP8pJBj/KSQY/yMfFPoIBwXGAAAAQgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAgIBlUk+G/+slE7/1bt5/9i+ff/XvX3/1719/9e9
        ff/XvX3/1719/9e9ff/XvX3/1719/9e9ff/XvX3/1719/9e9ff/XvX3/1719/9e9ff/Yvn3/0rl6/5B/
        VP8aFw/YAAAALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC4oIg/ttZpG/+vNff/z1o7/8dSM//HU
        jP/x1Iz/8dSM//HUjP/x1Iz/8dSM//HUjP/x1Iz/8dSM//HUjP/x1Iz/8dSM//HUjP/x1Iz/8dSM//HU
        jP/y1Yz/89aN/3ZoRP8AAACEBQQDAAAAAAAAAAAAAAAAAAEBAQQAAAA3AAAAiicgC/x9ai//oIxY/9zC
        gP/x1Iz/8NOL//DTi//w04v/8NOL//DTi//w04v/8NOL//DTi//w04v/8NOL//DTi//w04v/8NOL//DT
        i//w04v/8NOL//DTi//0143/pJBf/wYFA6cAAAACAAAAAAAAAAACAgIAAAAAYCUoKO9PVlj/Vl9i/1hg
        Y/9ES0z/Vk01/+LHg//x1Iz/8NOL//DTi//w04v/8NOL//DTi//w04v/8NOL//DTi//w04v/8NOL//DT
        i//w04v/8NOL//DTi//w04v/8NOL//TWjf+mkmD/BwYEqQAAAAIAAAAAAAAAAAAAAAMFBQWvgYqM/9Xo
        7v/g9///4fj//8zg6f84Ozj/wKhu//PWjf/w04v/8NOL//DTi//w04v/8NOL//DTi//w04v/8NOL//DT
        i//w04v/8NOL//DTi//w04v/8NOL//DTi//w04v/9NaN/6aSYP8HBgSpAAAAAgAAAAAAAAAADA0NAAAA
        AHs6P0D+dX+C/3+Mkf9+i5L/Y21z/0I9Lv/Zv33/8dSM//DTi//w04v/8NOL//DTi//w04v/8NOL//DT
        i//w04v/89aN//TXjf/01o3/9NeN//LVjP/w04v/8NOL//DTi//01o3/ppJg/wcGBKkAAAACAAAAAAAA
        AAAAAAAAAAAADgAAAF8AAACrHxoK/VxPJP95aUL/xq5z//HUjP/w04v/8NOL//DTi//w04v/8NOL//DT
        i//w04v/8tWM/+rOh/++pWv/j3xQ/4JxSf+ahVb/zLN1//DTi//x1Iz/8NOL//TWjf+mkmD/BwYEqQAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAFQAAAHA0LBH8nYY9/8Wsbf/sz4n/8dSM//DTi//w04v/8NOL//DT
        i//w04v/8NOL//PVjf/NtHb/V041/xIuOf8dT2n/M2N8/ytPYP8rNDL/e21I/+PIg//y1Yz/9NaN/6aS
        YP8HBgSpAAAAAgAAAAAAAAAAAAAAAAAAAEgVFxfWMDU29Tg8PP9AQ0D/ODk1/29iQf/pzIf/8dOL//DT
        i//w04v/8NOL//DTi//z1o3/x65y/zM1Kf8GUnr/Pqvk/2rN//9y0v//cND//1aiyP8OGyH/XFAz/+HF
        gv/1147/ppJg/wcGBKkAAAACAAAAAAAAAAAAAAADBAQEqneAgv/K3OH/1uv0/9bs9f++0dr/Nzk1/8Or
        cP/z1Y3/8NOL//DTi//w04v/89aN/8eucv8yNCn/CF2J/0u9+P9x0f//cdD//3HQ//9rxvT/MVtw/0lS
        V/9KUVT/eGpF//XXjv+mkmD/BwYEqQAAAAIAAAAAAAAAAP///wABAQGPUFZY/5ilqf+js7r/orO7/4WT
        m/85Ny7/0bd4//LVjP/w04v/8NOL//LVjP/HrnH/MjQp/whdif9Lvvj/cdD//2W86f9nv+z/asXy/zBZ
        bv9MVFj/xdjg/2Ntc/9nWzv/9NeN/6aSYP8HBgSpAAAAAgAAAAAAAAAAAAAAAAAAAB0BAQGLBgcIyhwZ
        EP5DOyD/VUsx/6uWY//w04v/8NOL//DTi//z1o3/1rt6/zU3K/8IXYn/S775/2/N/f9AeJT/JzU3/yg5
        Pv8gPEv/R09R/8DS2f9xfYL/Rj8s/9G3ef/12I7/ppJg/wcGBKkAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAUAAABhOzIU+6+VRP/YvXj/8tWN//HUi//w04v/8tSM/9/Egf+EpJX/Dnar/0u99/9vzf3/O3CM/zw5
        Kv+9pWv/sptl/yslGP9lbXD/Y2xw/0Y/LP/Qtnj/89WN//TWjf+mkmD/BwYEqQAAAAIAAAAAAAAAAAAA
        AAAAAAAwCQoKtBgaG+MkJCD+ODYp/z05LP+Me1H/7dGJ//PVjf/HrXH/Oj0x/xSEvf9Lw///b839/ztw
        jP88OSr/yrF0//TWjf/01o3/vaZu/0pCLv9WTDP/0Ld4//PVjf/w04v/9NaN/6aSYP8HBgSpAAAAAgAA
        AAAAAAAAAAAAAQMDA59mbW//tcXJ/8HU3P/A1N3/pba//zY2Mf/LsnT/1bt7/zY3Kv8GW4j/Srz2/2/N
        /P88cYz/PDkq/8qxdP/z1o3/8NOL//DTi//y1Iz/58uG/+rOh//y1Iz/8NOL//DTi//01o3/ppJg/wcG
        BKkAAAACAAAAAAAAAAAAAAABAwMDn2Ztb/+1xcn/wdTc/8DU3f+ltr//Njcx/8ivc/9tYD//AEdt/zi0
        9P9x0f//RYGg/zs4Kv/KsXT/89aN//DTi//w04v/8NOL//DTi//x04v/8NOL//DTi//w04v/8NOL//TW
        jf+mkmD/BwYEqQAAAAIAAAAAAAAAAAAAAAAAAAAwCQoKtBgaG+MkJCD+ODYp/z05LP+OfVL/0rd4/yIw
        L/8Kicv/Xcj//2/M+/8nRFL/o41b//bYjv/w04v/8NOL//DTi//w04v/8NOL//DTi//w04v/8NOL//DT
        i//w04v/9NaN/6aSYP8HBgSpAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAYTsyFPuvlUT/2L14//bY
        j/+5oGj/CzJE/xWg6f9ny/7/cdD//zJdc/9pWzr/6s2H//HUjP/w04v/8NOL//DTi//w04v/8NOL//DT
        i//w04v/8NOL//DTi//01o3/ppJg/wcGBKkAAAACAAAAAAAAAAAAAAAAAAAAHQEBAYsGBwjKHBkQ/kM7
        IP9VSzH/rpll/7WdZf8JNEf/EaDq/2TL//9sx/T/LVNm/xkaGf95a0f/68+I//DTi//w04v/8NOL//DT
        i//w04v/8NOL//DTi//w04v/8NOL//TWjf+mkmD/BwYEqQAAAAIAAAAAAAAAAP///wABAQGPUFZX/5il
        qf+js7r/orO7/4WTm/87OS//rpdi/xwwNP8Fj9b/Sbjw/zFabv9NVlr/pLW8/zEyLf/JsHP/8tWM//DT
        i//w04v/8NOL//DTi//w04v/8NOL//DTi//w04v/9NeN/6WRX/8GBQOrAAAAAgAAAAAAAAAAAAAAAwQE
        BKp3gIL/ytzh/9br9P/W7PX/vtHa/zc5Nf++pm3/V082/wBRfv8LSmv/TFRX/8TY4P9xfYP/TUUx/9/E
        gf/x1Iz/8NOL//DTi//w04v/8NOL//DTi//w04v/8NOL//DTi//z1Y3/vKVt/yciFov///8AAAAAAAAA
        AAAAAAAAAAAASBUXF9YwNTb1ODw8/0BDQP84OTX/b2JB/+vPiP/AqG7/HB4Y/y0zNv+0w8f/b3uA/0U+
        LP/Qtnj/8tWM//DTi//w04v/8tWM//DTi//w04v/8NOL//DTi//x1Iz/8tSM//HUi//hxYL7kH9TWeHF
        gQAAAAAAAAAAAAAAAAAAAAAAAAAAFQAAAHA0LBH8nYY9/8Wsbf/sz4n/8dSM//LUjP+plGH/NTMr/0FH
        SP9HQC3/0LZ4//PVjf/w04v/8NOL/+jMh//Tunr/8NOL//HUjP/w04v/89WN/+LHg//XvX3/9NaN/62Y
        ZP8ODQigAAAAAQAAAAAAAAAAAAAAAAAAAA4AAABfAAAAqx8aCv1cTyT/eWlC/8auc//x1Iz/8NOL//HU
        jP+6o2v/jHpP/9S7e//y1Yz/8NOL//DTi//z1o3/walw/ysmGf+EdEr/5cmE//PWjf/Cqm//Rj0n/2FV
        OP/z1o3/ppJg/wcGBKoAAAACAAAAAAAAAAAMDQ0AAAAAezo/QP51f4L/f4yR/36Lkv9ibXP/Qj0u/9m/
        ff/x1Iz/8NOL//PVjf/0143/8tSM//DTi//w04v/8NOL//PWjf+6o2r/Ghou/yEkTv9RRzH/fm9G/ysp
        Mv8aH0//U0k0//LVjP+mkmD/BwYEqQAAAAIAAAAAAAAAAAAAAAMFBQWvgYqM/9Xo7v/g9///4fj//8zg
        6f84Ozj/wKht//PWjf/w04v/8NOL//DTi//w04v/8NOL//DTi//w04v/89aN/7mjaP8nKUr/XGjq/zY+
        jf8iJ1j/UFrM/0NMsf9USjT/8tWM/6aSYP8HBgSpAAAAAgAAAAAAAAAAAgICAAAAAGElKCjvT1ZY/1Zf
        Yv9YYGP/REtM/1VNNf/ix4P/8dSM//DTi//w04v/8NOL//DTi//w04v/8NOL//DTi//z1o3/uaNo/yYo
        SP9hbvf/ZXL//2Nw+/9odf//Qkyw/1RKNP/y1Yz/ppJg/wcGBKkAAAACAAAAAAAAAAAAAAAAAQEBBAAA
        ADcAAACKJyAL/H1qL/+gjFj/3MKA//HUjP/w04v/8NOL//DTi//w04v/8NOL//DTi//w04v/8NOL//PW
        jf+5o2j/JihJ/2Fu9v9lcv//ZXL//2d0//9CTLD/VEo0//LVjP+kkF//BgUDpwAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAC4oIg/ttZpG/+vNff/z1o7/8dSM//HUjP/x1Iz/8dSM//HUjP/x1Iz/8dSM//HU
        jP/x1Iz/9deO/7ukaf8mKEn/Ym74/2Zz//9mc///aHX//0NNsf9VSzX/8tSM/3ZoRf8AAACEBQUDAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAABgICAZZJPhv/rJRO/9W7ef/Yvn3/1719/9e9ff/XvX3/1719/9e9
        ff/XvX3/1719/9e9ff/awH7/ppJe/yEjP/9UX9T/V2Pd/1di3P9ZZOD/OUKY/0c/LP+PflP/GxcP2AAA
        ACwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFgAAAJYVEgjvJyIV/ykkGP8pJBj/KSQY/ykk
        GP8pJBj/KSQY/ykkGP8pJBj/KSQY/ykkGP8fHBL/BQYK/wwOH/8NDyH/DQ8h/w0PIf8JChb/CQgG+ggH
        BMYAAABCAAAAAAAAAAAAAAAA4AAAAOAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACAAAAA4AAAAOAAAAA=
</value>
  </data>
</root>